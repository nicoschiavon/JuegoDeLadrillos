/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gob.ar.itse.JuegoDeLadrillos.view;

import gob.ar.itse.JuegoDeLadrillo.model.Ladrillo;
import gob.ar.itse.JuegoDeLadrillo.model.Objeto;
import gob.ar.itse.JuegoDeLadrillo.model.Paleta;
import gob.ar.itse.JuegoDeLadrillos.controller.Universo;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 *
 * @author nico_
 */
public class JuegoDeLadrillos extends javax.swing.JFrame implements KeyListener, ActionListener{

    private Universo universo;
    private Objeto pelota;
    private Paleta paleta;
    private Ladrillo ladrillo;
    private Random random;
    public static ArrayList<Ladrillo> map = new ArrayList<Ladrillo>();
    public static boolean play = false;
    public static int score = 0;
    private int delay = 8;
    private Timer timer;
    public int mapSize;
    public static boolean lost = false;
    public static boolean win = false;
    private int nivel;
    public ArrayList<String> ranking =  new ArrayList<String>();
    public String iniciales;
    public int uniH;
    public int uniW;
    
    /**
     * Creates new form JuegoDeLadrillos
     */
    public JuegoDeLadrillos() {
        initComponents();
         Toolkit tk = Toolkit.getDefaultToolkit();
        Dimension d =  tk.getScreenSize();
        uniH = (int)d.getHeight();
        uniW = (int)d.getWidth();
        mniIniciar.setEnabled(false);
        mniParar.setEnabled(false);
        setTitle("JuegoDeLadrillos");
        setLocationRelativeTo(null);
        setExtendedState(this.MAXIMIZED_BOTH);
        
        addKeyListener(this);
        setFocusTraversalKeysEnabled(false);
        timer = new Timer(delay, this);
        
        
        this.random = new Random();

        
        this.paleta = new Paleta(uniW / 2, uniH - 200);
        this.pelota = new Objeto(uniW / 2 + (paleta.paletaWidth/2), uniH - 230);
        this.universo = new Universo(this.getSize(), this.pelota, this.ladrillo, this.paleta);

        this.setLayout(new BorderLayout());

        this.add(this.universo, BorderLayout.CENTER);

        this.universo.agregarObjeto(pelota);
        this.universo.agregarPaleta(paleta);
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu2 = new javax.swing.JMenu();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mniIniciar = new javax.swing.JMenuItem();
        mniParar = new javax.swing.JMenuItem();
        mniRanking = new javax.swing.JMenuItem();
        mniSalir = new javax.swing.JMenuItem();
        mniNiveles = new javax.swing.JMenu();
        mniNivel1 = new javax.swing.JMenuItem();
        mniNivel2 = new javax.swing.JMenuItem();
        mniNivel3 = new javax.swing.JMenuItem();

        jMenu2.setText("jMenu2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jMenu1.setText("File");

        mniIniciar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_SPACE, 0));
        mniIniciar.setText("Iniciar");
        mniIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniIniciarActionPerformed(evt);
            }
        });
        jMenu1.add(mniIniciar);

        mniParar.setText("Parar");
        mniParar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniPararActionPerformed(evt);
            }
        });
        jMenu1.add(mniParar);

        mniRanking.setText("Ranking");
        mniRanking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniRankingActionPerformed(evt);
            }
        });
        jMenu1.add(mniRanking);

        mniSalir.setText("Salir");
        mniSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSalirActionPerformed(evt);
            }
        });
        jMenu1.add(mniSalir);

        jMenuBar1.add(jMenu1);

        mniNiveles.setText("Niveles");

        mniNivel1.setText("Nivel 1");
        mniNivel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniNivel1ActionPerformed(evt);
            }
        });
        mniNiveles.add(mniNivel1);

        mniNivel2.setText("Nivel 2");
        mniNivel2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniNivel2ActionPerformed(evt);
            }
        });
        mniNiveles.add(mniNivel2);

        mniNivel3.setText("Nivel 3");
        mniNivel3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniNivel3ActionPerformed(evt);
            }
        });
        mniNiveles.add(mniNivel3);

        jMenuBar1.add(mniNiveles);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 277, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mniIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniIniciarActionPerformed
        timer.start();
        play = true;
        mniIniciar.setEnabled(false);
        mniParar.setEnabled(true);
        
    }//GEN-LAST:event_mniIniciarActionPerformed

    private void mniPararActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniPararActionPerformed
        play = false;
        mniIniciar.setEnabled(true);
        mniParar.setEnabled(false);
        mniNivel1.setEnabled(true);
        mniNivel2.setEnabled(true);
        mniNivel3.setEnabled(true);
        
    }//GEN-LAST:event_mniPararActionPerformed

    private void mniNivel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniNivel1ActionPerformed
        mniIniciar.setEnabled(true);
        mniNivel1.setEnabled(false);
        mniNivel2.setEnabled(false);
        mniNivel3.setEnabled(false);
        nivel1();
        
    }//GEN-LAST:event_mniNivel1ActionPerformed

    private void mniSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSalirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_mniSalirActionPerformed

    private void mniNivel2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniNivel2ActionPerformed
        mniIniciar.setEnabled(true);
        mniNivel1.setEnabled(false);
        mniNivel2.setEnabled(false);
        mniNivel3.setEnabled(false);
        nivel2();
    }//GEN-LAST:event_mniNivel2ActionPerformed

    private void mniNivel3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniNivel3ActionPerformed
        mniIniciar.setEnabled(true);
        mniNivel1.setEnabled(false);
        mniNivel2.setEnabled(false);
        mniNivel3.setEnabled(false);
        nivel3();
    }//GEN-LAST:event_mniNivel3ActionPerformed

    private void mniRankingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniRankingActionPerformed
        JOptionPane.showMessageDialog(rootPane, ranking);
    }//GEN-LAST:event_mniRankingActionPerformed

    @Override
    public void keyTyped(KeyEvent e) {
        
    }

    @Override
    public void keyPressed(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_LEFT) {
            if (this.paleta.paletaPosX <= 0) {
                this.paleta.paletaPosX = 0;
            } else {
                this.paleta.mvoerIzquierda();
            }
        }
        
        if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
            if (this.paleta.paletaPosX >= uniW - paleta.paletaWidth) {
                this.paleta.paletaPosX = uniW - paleta.paletaWidth;
            } else {
                this.paleta.moverDerecha();
                
            }  
        }
        if (e.getKeyCode() == KeyEvent.VK_SPACE) {
            play = true;
        }
        repaint();
    }

    @Override
    public void keyReleased(KeyEvent e) {
        
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        timer.start();
         
        if(play) {
            //Intersección Paleta y Pelota
            Rectangle r1 = new Rectangle(pelota.ballPosX, pelota.ballPosY, pelota.ballwidth, pelota.ballheight);
            Rectangle r2 = new Rectangle(paleta.paletaPosX, paleta.paletaPosY, paleta.paletaWidth, paleta.paletaHeight);
            if (r1.intersects(r2)) {
                 
                 if(pelota.ballPosX + pelota.ballwidth == paleta.paletaPosX){
                     pelota.ballYdir =- pelota.ballYdir;
                 }else if(pelota.ballPosX == paleta.paletaPosX + paleta.paletaWidth) {
                     pelota.ballYdir =- pelota.ballYdir;
                 }
                 pelota.ballYdir = - pelota.ballYdir;
             } 
             
            pelota.ballPosX += pelota.ballXdir;
            pelota.ballPosY += pelota.ballYdir;
         
            if (pelota.ballPosX < 0) {
                pelota.ballXdir =- pelota.ballXdir;
            }
            
            if (pelota.ballPosY < 0) {
                pelota.ballYdir =- pelota.ballYdir;
            }
            
            if (pelota.ballPosX > uniW) {
                pelota.ballXdir =- pelota.ballXdir;
            }
            
             //Intersección Ladrillo Y Pelota
            for (int i = 0; i < map.size(); i++) {
                this.ladrillo = map.get(i);
                Rectangle ladrilloRec = new Rectangle(this.ladrillo.ladrilloX, this.ladrillo.ladrilloY, this.ladrillo.brickWidth, this.ladrillo.brickHeight);
                Rectangle bolaRec = new Rectangle(this.pelota.ballPosX, this.pelota.ballPosY, this.pelota.ballwidth, this.pelota.ballheight);
                
                if(bolaRec.intersects(ladrilloRec)) {
                    map.remove(this.ladrillo);
                    score = score + 50;
                    
                    System.out.println("score: " + score);
                    Universo.actualizarLadrillo();
                    
                    pelota.ballYdir =- pelota.ballYdir;
                }
                
            }
            
            //Perder
            if (pelota.ballPosY > uniH - 100) {
                play = false;
                timer.stop();
                mniNivel1.setEnabled(true);
                mniNivel2.setEnabled(true);
                mniNivel3.setEnabled(true);
                pelota.ballPosX = uniW / 2 + (paleta.paletaWidth/2);
                
                pelota.ballPosY = uniH - 230;
                pelota.ballYdir = -4;
                pelota.ballYdir = -4;
                paleta.paletaPosX = uniW / 2;
                mniIniciar.setEnabled(false);
                mniParar.setEnabled(false);
                lost = true;
                map.clear();
                Universo.actualizarLadrillo();
                repaint();
                iniciales = JOptionPane.showInputDialog("Ingrese sus iniciales");
                ranking.add(iniciales);
                ranking.add(String.valueOf(score));
                
            } else {
                // Ganar 
                if(map.isEmpty()) {
                    timer.stop();

                    pelota.ballPosX = uniW / 2;
                    pelota.ballPosY = (uniH / 2 + 200);

                    if(pelota.ballXdir > 0) {
                        pelota.ballYdir =- pelota.ballYdir;
                        pelota.ballXdir =- pelota.ballXdir;
                    }
                    mniIniciar.setEnabled(true);
                    mniParar.setEnabled(false);
                    System.out.println("Nivel: "+ nivel);
                    switch (nivel){
                            case 1:
                                nivel = 2;
                                nivel2();
                                break;
                            case 2:
                                nivel = 3;
                                nivel3();
                                break;
                            case 3:
                                pelota.ballXdir = pelota.ballXdir -2;
                                pelota.ballYdir = pelota.ballYdir -2;
                                nivel = 1;
                                nivel1();
                                break;
                    }
                }
            }
            
            
            
         }
         repaint();
    }
    //Nivel 1
    public void nivel1(){
        Universo.mapa.clear();
        Universo.actualizarLadrillo();
        repaint();
        nivel = 1;
        
        for (int i = 0; i < 4; i++) {
            int j = 0;
            while(j * 88 < uniW){
            this.ladrillo = new Ladrillo(j * 107 , i * 40 );
                this.map.add(this.ladrillo);
            j++;
            }
           
        }

        for (int i = 0; i < 4; i++) {
            this.ladrillo = map.get(i);
                this.universo.agregarLadrillo(ladrillo);
                int j = 0;
                while(j * 88 < uniW) {
                this.ladrillo = map.get(j);
                
                this.universo.agregarLadrillo(ladrillo);
                j++;
            }
        }
        
        Universo.actualizarLadrillo();
        repaint();
    }
    //Nivel 2
    public void nivel2(){
        Universo.mapa.clear();
        Universo.actualizarLadrillo();
        repaint();
        nivel = 2;
        
        for (int i = 0; i < 5; i++) {
            int j = 0;
            while(j * 88 < uniW){
            this.ladrillo = new Ladrillo(j * 107 , i * 40 );
                this.map.add(this.ladrillo);
            j++;
            }
           
        }

        for (int i = 0; i < 4; i++) {
            this.ladrillo = map.get(i);
                this.universo.agregarLadrillo(ladrillo);
                int j = 0;
                while(j * 88 < uniW) {
                this.ladrillo = map.get(j);
                
                this.universo.agregarLadrillo(ladrillo);
                j++;
            }
        }
        
        Universo.actualizarLadrillo();
        repaint();
    }
    //Nivel 3
    public void nivel3(){
        Universo.mapa.clear();
        Universo.actualizarLadrillo();
        repaint();
        nivel = 3;
        
        for (int i = 0; i < 6; i++) {
            int j = 0;
            while(j * 88 < uniW){
            this.ladrillo = new Ladrillo(j * 107 , i * 40 );
                this.map.add(this.ladrillo);
            j++;
            }
           
        }

        for (int i = 0; i < 4; i++) {
            this.ladrillo = map.get(i);
                this.universo.agregarLadrillo(ladrillo);
                int j = 0;
                while(j * 88 < uniW) {
                this.ladrillo = map.get(j);
                
                this.universo.agregarLadrillo(ladrillo);
                j++;
            }
        }
        
        Universo.actualizarLadrillo();
        repaint();
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem mniIniciar;
    private javax.swing.JMenuItem mniNivel1;
    private javax.swing.JMenuItem mniNivel2;
    private javax.swing.JMenuItem mniNivel3;
    private javax.swing.JMenu mniNiveles;
    private javax.swing.JMenuItem mniParar;
    private javax.swing.JMenuItem mniRanking;
    private javax.swing.JMenuItem mniSalir;
    // End of variables declaration//GEN-END:variables
}
